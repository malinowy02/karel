PROGRAM A_COM

%STACKSIZE = 4000
%NOLOCKGROUP
%NOPAUSE=ERROR+COMMAND+TPENABLE
%ENVIRONMENT uif
%ENVIRONMENT sysdef
%ENVIRONMENT kclop
%ENVIRONMENT bynam
%ENVIRONMENT fdev
%ENVIRONMENT flbt
%ENVIRONMENT STRNG
%ENVIRONMENT TIM
%ENVIRONMENT REGOPE --GET_REG
%INCLUDE klevccdf
%INCLUDE klevkeys
%INCLUDE klevkmsk


VAR     --variables declaration with types
	file_var : FILE         --do utworzenia pliku przesylu  
	new_str	: STRING[9]
	tmp_str  : STRING[126]  --do wysylania stringa
	tmp_real : REAL
    xyz :XYZWPR     --przechowuje pozycje
	entry,          --do ustawienia portu automatycznie
    tmp_int,        --do licznika w petli
    prg_indx,       --jesli chce wywolac program
	i_val,          --do przypisania wartosci z rejestru
	STATUS : INTEGER    --zmienna do statusow
	r_val :REAL     --do przypisania wartosci z rejestru
	r_flg :BOOLEAN  --flaga przypisywania wartosci z rejestru

	loop1,          --uzywane do petli
	loop2	 : BOOLEAN


ROUTINE ustaw_screen
BEGIN
    WRITE(CHR(137),CHR(128)); -- Clear the TP USER menu screen
	FORCE_SPMENU(TP_PANEL,SPI_TPUSER,1) -- Force the TP USER menu to be visible
END ustaw_screen

ROUTINE pos_string :STRING
VAR
    str_r: STRING[126]
    ary_r :ARRAY[6] OF STRING[10]
BEGIN
	xyz = CURPOS(0,0) --pobranie obecnej pozycji
	CNV_REAL_STR(xyz.x, 2, 3, ary_r[1])     --syntax(real input, length, num_digits, string target)
	CNV_REAL_STR(xyz.y, 2, 3, ary_r[2])
	CNV_REAL_STR(xyz.z, 2, 3, ary_r[3])
	CNV_REAL_STR(xyz.w, 2, 3, ary_r[4])
	CNV_REAL_STR(xyz.p, 2, 3, ary_r[5])
	CNV_REAL_STR(xyz.r, 2, 3, ary_r[6])
	str_r = ary_r[1] + ary_r[2] + ary_r[3] + ary_r[4] + ary_r[5] + ary_r[6] --sklejenie pozycji w stringa
    RETURN(str_r)   --zwrocenie wartosci
END pos_string

ROUTINE pos_store (reg_id : INTEGER; xyz3_loc: XYZWPR)
BEGIN
	SET_POS_REG(reg_id , xyz3_loc, STATUS)
END pos_store

ROUTINE pos_new (x,y,z,w,p,r :REAL) :XYZWPR
VAR
xyz_loc :XYZWPR
BEGIN
	xyz_loc.x=x
	xyz_loc.y=y
	xyz_loc.z=z
	xyz_loc.w=w
	xyz_loc.p=p
	xyz_loc.r=r
	RETURN(xyz_loc)
END pos_new

ROUTINE decode( in_s :STRING)	:XYZWPR
VAR
	xyz2_loc: XYZWPR
	ar_l :ARRAY[6] OF REAL
	i_loc :INTEGER
BEGIN
	FOR i_loc=0 TO 5 DO
		new_str=SUB_STR(in_s,1+i_loc*8,8)
		CNV_STR_REAL(new_str,r_val)
		ar_l[i_loc+1]=r_val
	ENDFOR
	xyz2_loc = pos_new(ar_l[1],ar_l[2],ar_l[3],ar_l[4],ar_l[5],ar_l[6])
	RETURN(xyz2_loc)
END decode

-------------------------GLOWNA PETLA PROGRAMU------------------------------------------
BEGIN
	ustaw_screen
	
    SET_FILE_ATR(file_var, ATR_IA)  -- set attributes of file before its opened (file_id, atr_type, art value)
	SET_VAR(entry, '*SYSTEM*','$HOSTC_CFG[1].$SERVER_PORT', 8000, STATUS) -- syntax : SET_VAR(entry, prog_name, var_name, value, status

	-- Connect the tag
    WRITE('Program is started.',CR)
	MSG_CONNECT('C1:',STATUS)   -- Connect a client or server port. Status explains the status of the attempted operation. If it is not equal to 0, then an error occurred
	WRITE('Connect status = ',STATUS,CR)

	loop1 = TRUE
		IF STATUS = 0 THEN
			WHILE loop1 = TRUE DO
				WRITE('Opening file...',CR)
				OPEN FILE file_var('rw','C1:')  -- Syntax : OPEN FILE file_var ( usage_string, file_string). Tutaj otwarcie pliku oznacza komunikacje z serwerem i wysylanie/otrzymywanie komunikatow
				STATUS = IO_STATUS(file_var)    -- Use the IO_STATUS built-in function to verify if the open file operation was successful
				IF STATUS = 0 THEN
					loop2 = TRUE
					WHILE loop2 = TRUE DO	--PETLA KOMUNIKACYJNA
						tmp_str = pos_string    --uzycie ROUTINE do pobrania obecnej lokalizacji i zrobienia jej na string
						WRITE file_var(tmp_str ::126)
						WRITE('Waiting to read from server...')
						READ file_var(tmp_str::126)	--Odczytanie stringa zwrotnego
						WRITE('Read: ',tmp_str,CR)
						new_str= SUB_STR(tmp_str,1,1) --sprawdzenie pierwszej litery/cyfry wiadomosci
						
						IF new_str ='0' THEN	--QUIT
							loop2=FALSE
						ENDIF
						
						IF new_str='p' THEN	--NOWA POZYCJA PR[ ]
							READ file_var(tmp_str::126)
							WRITE('Read: ',tmp_str,CR)
							xyz=decode(tmp_str)
							READ file_var(tmp_str::126)
							new_str= SUB_STR(tmp_str,1,4)
							CNV_STR_INT(new_str, tmp_int)
							pos_store(tmp_int, xyz)
						ENDIF
						
						IF new_str='m' THEN	--RUCH ROBOTA
							READ file_var(tmp_str::126)
							WRITE('Read: ',tmp_str,CR)
							new_str= SUB_STR(tmp_str,1,4)
							CNV_STR_INT(new_str, tmp_int)
							SET_INT_REG(5, tmp_int, STATUS)	-- wpisz w rejestr R[5] numerek pozycji
							CALL_PROGLIN('B_MOVE',1, prg_indx, FALSE) 	--Execute PROG.TP		
						ENDIF
						IF new_str='r' THEN
							tmp_str = pos_string    --uzycie ROUTINE do pobrania obecnej lokalizacji i zrobienia jej na string
							WRITE file_var(tmp_str ::126)
						ENDIF
						
					ENDWHILE
					loop1 = FALSE
					WRITE('Closed file.',CR)
					CLOSE FILE file_var
				ELSE
					WRITE('Error opening file',CR)
					loop1 = FALSE
				ENDIF						
			ENDWHILE
		ENDIF
	MSG_DISCO('C1:',STATUS)
	WRITE('Disconnect status=',STATUS,CR)
END A_COM

